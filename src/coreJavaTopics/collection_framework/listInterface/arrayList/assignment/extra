		
		
				
		ArrayList<TransactionStatement> duplicate_statement = new ArrayList<>(List.copyOf(statement));
		//duplicate_statement.addAll(statement);
		
		************************
			for (int i = 0; i < statement.size() ; i++) {
				for (int j = 0; j < duplicate_statement.size(); j++) {
					if (statement.get(i).getTransaction_id().equals(duplicate_statement.get(j).getTransaction_id())) {
						System.out.println("Cannot Proccess since there is duplicate transaction id");
					}
				}
			}
			
			
	*******************************		
			package coreJavaTopics.collection_framework.listInterface.arrayList.realtimeExample;

import java.util.ArrayList;

public class TransactionViewDetail {
    public static void main(String[] args) {
        ArrayList<TransactionStatement> statement = new ArrayList<>();

        statement.add(new TransactionStatement(6358415L, "Debited", "12-10-2023", 500.0d));
        statement.add(new TransactionStatement(2541589L, "Credited", "12-10-2023", 1500.0d));
        statement.add(new TransactionStatement(2569842L, "Debited", "12-10-2023", 605.0d));
        statement.add(new TransactionStatement(2159458L, "Debited", "12-10-2023", 55.0d));
        statement.add(new TransactionStatement(6358415L, "Credited", "12-10-2023", 5000.0d));

        ArrayList<TransactionStatement> uniqueEntries = new ArrayList<>();

        for (TransactionStatement transaction : statement) {
            boolean isUnique = true;
            for (TransactionStatement unique : uniqueEntries) {
                if (transaction.equals(unique)) {
                    isUnique = false;
                    break;
                }
            }
            if (isUnique) {
                uniqueEntries.add(transaction);
            }
        }

        // Display unique entries
        for (TransactionStatement unique : uniqueEntries) {
            System.out.println("Transaction ID: " + unique.getTransaction_id());
            System.out.println("Transaction Type: " + unique.getTransaction_type());
            System.out.println("Transaction Date: " + unique.getTransaction_date());
            System.out.println("Transaction Amount: " + unique.getTransaction_amount());
            System.out.println();
        }
    }
}



******************************
        ArrayList<Long> displayedTransactionIds = new ArrayList<>();
        for (TransactionStatement transaction : statement) {
            if (!displayedTransactionIds.contains(transaction.getTransaction_id())) {
                System.out.println("Transaction ID: " + transaction.getTransaction_id());
                displayedTransactionIds.add(transaction.getTransaction_id());
            }
        }
        
        System.out.println("-------------------------");
        ArrayList<Long> displayedTransactionId = new ArrayList<>();
        for (TransactionStatement transaction : statement) {
            if (!displayedTransactionIds.contains(transaction.getTransaction_id())) {
                System.out.println("Transaction ID: " + transaction.getTransaction_id());
                displayedTransactionIds.add(transaction.getTransaction_id());
            } else {
                System.out.println("Error: Duplicate Transaction ID encountered - " + transaction.getTransaction_id());
            }
        }
        
        
        
        
        
        
        ******************************* 
        	Iterator<TransactionStatement> itr = statement.iterator();
		ArrayList<Long> trans_id = new ArrayList<Long>();
		while(itr.hasNext()) {
			long transaction_id = itr.next().getTransaction_id();
			trans_id.add(transaction_id);
		}
		System.out.println(trans_id);
		
		
		for (int i = 0; i < trans_id.size() ; i++) {
			for (int j = 0; j < statement.size(); j++) {
				if (trans_id.get(i).equals(statement.get(j).getTransaction_id())) {
					System.out.println(trans_id.get(i) + " : " + statement.get(j).getTransaction_id());
				}
			}
		}
		
		
		**********************
		    private static boolean isTransactionIdNotUnique(ArrayList<TransactionStatement> statement, Long transactionId) {
        for (TransactionStatement transaction : statement) {
            if (transaction.getTransaction_id().equals(transactionId)) {
                return true; // Transaction ID is not unique
            }
        }
        return false; // Transaction ID is unique
    }
		
		
		**********************************
		
			@Override
	public boolean equals(Object obj) {
		 if(this == obj) 
	            return true;
		 if(obj == null || obj.getClass()!= this.getClass()) 
	            return false;
		 TransactionStatement statement = (TransactionStatement) obj;
		 return (statement.transaction_id == this.transaction_id);
	}